WEBVTT

00:00.300 --> 00:04.600
Hi everybody and welcome back this lecture we're looking at making an instance of a class.

00:04.740 --> 00:09.130
So take the class of a set of instructions for how to make an instance the class book.

00:09.150 --> 00:15.300
It's a set of instructions that tells you how to make individual instances representing specific books.

00:15.300 --> 00:20.120
So obviously every book has something in common with every book they open they close they pay to turn

00:20.190 --> 00:25.800
the pages turn each page has a page number just as every Moag or every cop has something in common with

00:25.830 --> 00:26.640
every cop.

00:26.730 --> 00:29.330
They might all have a hand up so why not have a handle.

00:29.370 --> 00:35.040
And that's what we use the functions within the class for they to find the attributes of each instance

00:35.130 --> 00:36.470
or each object.

00:36.480 --> 00:41.420
So let's make an instance now representing a specific book so the book that we're using here.

00:41.430 --> 00:43.710
It's the same one we just wrote in the last example.

00:43.710 --> 00:50.190
First we tell the client to create a book whose name is Elan Musk and for which the price is 14 99 and

00:50.190 --> 00:52.240
the publisher is Vergine books.

00:52.260 --> 00:56.260
When Peyton reads this line it calls the N.F. method in book 1 arguments.

00:56.280 --> 01:01.590
Elon Musk thousand ninety nine and Virgin Books the init method creates an instance representing this

01:01.590 --> 01:07.090
particular book and sets the name price and publisher attributes using the values we provided the init

01:07.110 --> 01:09.180
method has no explicit return statement.

01:09.210 --> 01:13.070
But Python automatically returns an instance representing this book.

01:13.080 --> 01:14.560
So let's look at how we do that.

01:14.580 --> 01:17.940
So we are creating an instance of a book now from our class.

01:17.970 --> 01:22.920
So let's just call it my book equals book.

01:23.060 --> 01:26.650
So we're calling our class Elon Musk

01:32.070 --> 01:37.480
fourteen ninety nine comma Virgine books

01:40.620 --> 01:41.100
perfect.

01:41.160 --> 01:43.870
We store instances in the variable my book.

01:44.190 --> 01:48.360
We can usually assume that a couple I's name like book refers to a class and a lower case name like

01:48.360 --> 01:52.690
my book refers to a single instance created for that class.

01:52.710 --> 01:56.730
So what happens if we try and print this nothing because we haven't yet given it and print statements

01:57.120 --> 01:58.030
in the next lecture.

01:58.050 --> 02:01.200
We'll look at accessing attributes of the class.

02:01.230 --> 02:07.110
But for now it's enough to know that we've created that instance my book we've called the class my book

02:07.560 --> 02:10.220
and we're in the end parameters here.

02:10.290 --> 02:14.940
We've passed the arguments mosque forking 499 and version books.

02:15.090 --> 02:17.340
We look at how these functions come into play and a little later.

02:17.550 --> 02:18.860
But for now that's it.

02:19.020 --> 02:24.780
So I hope you can see that each lecture here involving the class is building upon each one to eventually

02:24.780 --> 02:27.840
running the class program and seeing what output we get.

02:27.880 --> 02:32.730
But because class is an object Our entire program can be a bit difficult to get your head around and

02:32.730 --> 02:33.740
a little bit complicated.

02:33.780 --> 02:35.850
We're taking it step by step.

02:35.850 --> 02:37.770
Thanks for listening and I'll see you in the next lecture.
